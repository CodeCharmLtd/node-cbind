static NAN_METHOD(v8_<%= constructor.name%>_constructor) {
  try {
    v8::Local<v8::Object> thisValue = args.This();
    // more strict checking for calling with different this
    if(!thisValue->IsObject() || !v8::Handle<v8::Object>(thisValue)->InternalFieldCount()) {
      // 
      throw v8_exception("Constructor should be called using 'new'");
    }
  <%
    var parametersData = {
      setOffset: 0,
      outputParameters: [],
      name2param: {}
    };
    var outputParameters = parametersData.outputParameters;

    var parameters = constructor.parameters;


  %>

  <%@ parameters.fts (parameters,parametersData) %>



    <% var parametersForCall = parameters.map(function(parameter, i) {
        return "arg" + i;
      }).join(", ");
    %>
    auto obj = new <%= constructor.name%>(<%= parametersForCall%>);

    HandleWrap<<%=constructor.name%>*>::wrap(thisValue, obj, [](<%=constructor.name%>* obj) {
      delete obj;
    });;

    NanReturnUndefined();

  } catch(const std::exception& e) {
    NanThrowError(v8::Exception::Error(NanNew<v8::String>(e.what())));
    NanReturnUndefined();
  } catch(...) {
    NanThrowError(v8::Exception::Error(NanNew<v8::String>("Unknown exception thrown in native code")));
    NanReturnUndefined();
  }
}