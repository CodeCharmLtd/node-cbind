<%
  var parametersData = {
    setOffset: 0,
    outputParameters: [],
    name2param: {}
  };
  var outputParameters = parametersData.outputParameters;
  var parameters = obj.parameters || obj.type.parameters;
%>

<%@ parameters.fts (parameters,parametersData) %>

<% var parametersForCall = parameters.map(function(parameter, i) {
    return "arg" + i;
  }).join(", ");
%>
  
<% var returnType = (obj.functionPointer) ? 
    typeIdentifier(obj.type) : typeIdentifier(obj); %>


<% var returnValues = {}; %>

v8::Handle<v8::Value> v8_retValue;

<% if(returnType === 'void') { %>
  <%= callObject%>(<%= parametersForCall%>);

<% } else { %>
  auto retValue = <%=callObject%>(<%= parametersForCall%>);
  
  <% console.log("KOSMOS", obj); %>

  <% obj.attributes = obj.attributes || {}; %>

  <% if(!obj.type.functionPointer) { %>

    v8_retValue = toV8Type_<%= returnType %>(retValue
      <% if(obj.attributes.free) { %>
        , [=](<%=typeString(obj)%> obj) {
        <% if(obj.attributes.free === true) { %>
          free(obj);
        <% } else if(obj.attributes.free === 'delete') { %>
          delete obj;
        <% } else { %>
          <%=obj.attributes.free%>(obj);
        <% } %>
        });
      <% } else { %>

        );
      <% } %>
  <% } else { %>

    <% console.log("SATURN"); %>

    v8_retValue = FunctionWrap<decltype(retValue)>::create("<%=typeString(obj.type, {forceParams: true})%>", retValue, <%=typeIdentifier(obj.type, {forceParams: true}) %>_handler);


  <% } %>
<% } %>

<% if(outputParameters.length === 1 && returnType === 'void') { /* handle more output parameters */  %>
  v8_retValue = toV8Type_<%=typeIdentifier(outputParameters[0].type)%>(<%=outputParameters[0].name%>);

<% } else if(outputParameters.length >= 1) { %>
  auto __retObject = NanNew<v8::Object>();

  <% outputParameters.forEach(function(outputParameter) { %>
    <% console.log(outputParameter); %>
    __retObject->Set(NanNew<v8::String>("<%=outputParameter.parameter.name%>"), toV8Type_<%=typeIdentifier(outputParameter.type)%>(<%=outputParameter.name%>));
  <% }); %>
  __retObject->Set(NanNew<v8::String>("retValue"), v8_retValue);
  v8_retValue = __retObject;
<% } %>

NanReturnValue(v8_retValue);